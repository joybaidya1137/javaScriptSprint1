/**
 * Polymorphism ржорж╛ржирзЗ ржХрзА?
ЁЯСЙ ржПржХржЯрж╛ ржХрж╛ржЬ / method тЖТ ржЖрж▓рж╛ржжрж╛ ржЖрж▓рж╛ржжрж╛ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржмрзЗ, depending on context (object/class)ред
       Poly = many (ржЕржирзЗржХ)
       Morph = form (рж░рзВржк)
ржорж╛ржирзЗ тЖТ ржПржХ ржирж╛ржорзЗрж░ method, ржХрж┐ржирзНрждрзБ behavior ржЖрж▓рж╛ржжрж╛ рж╣рждрзЗ ржкрж╛рж░рзЗред


*** 2 ржзрж░ржирзЗрж░ Polymorphism (OOP ржП)
     1.Compile-time Polymorphism (Method Overloading)
           ржПржХржЗ ржирж╛ржорзЗрж░ method, ржХрж┐ржирзНрждрзБ parameter ржЖрж▓рж╛ржжрж╛ред

Java / C++ ржП ржерж╛ржХрзЗ, ржХрж┐ржирзНрждрзБ JavaScript-ржП ржЖрж╕рж▓ overloading ржирзЗржЗред


 */


//Example (JS ржП simulation):

class mathOps{
    add (a,b){
        return a+b;
    }

    addthree(a,b,c){
        return a+b+c
    }
}

const obj = new mathOps();

console.log(obj.add(6,9));
console.log(obj.addthree(6,9,8));


// 2. Run-time Polymorphism (Method Overriding)
//Example:

class joy{
    RJ(){
        return "Some generic RJ for prant class joy";
    }
}

class ripa extends joy{
    RJ(){
        return "ripa this is extends joy"
    }
}
 
class puja extends joy{
    RJ(){
        return "puja this is extends joy "
    }
}

const J = new joy();
const joy1 = new ripa();
const joy2 = new puja();

console.log(J.RJ());
console.log(joy1.RJ());
console.log(joy2.RJ());

/**
 * ЁЯСЙ ржПржЦрж╛ржирзЗ RJ() method рж╕ржмрж╛рж░ ржирж╛ржо ржПржХржЗ, ржХрж┐ржирзНрждрзБ object (J,joy1,joy2) ржнрзЗржжрзЗ ржЖрж▓рж╛ржжрж╛ ржХрж╛ржЬ ржХрж░ржЫрзЗред
ржПржЯрж╛ржЗ Polymorphism!



#################   Viva qusetion:  ####################################
1.What is Polymorphism?
ЁЯСЙ Polymorphism means one name, many forms.
    A single method can behave differently depending on the object or context.




2. Types of Polymorphism?

1.Compile-time Polymorphism (Method Overloading)
       ЁЯСЙ ржПржЦрж╛ржирзЗ ржПржХржЗ method-ржПрж░ ржирж╛ржо ржерж╛ржХрзЗ, ржХрж┐ржирзНрждрзБ parameter ржЖрж▓рж╛ржжрж╛ рж╣рзЯред
       ЁЯСЙ Compiler ржЖржЧрзЗржЗ ржмрзБржЭрзЗ ржлрзЗрж▓рзЗ ржХрзЛржи method ржХрж▓ рж╣ржмрзЗред

     ЁЯУМ Java / C++ ржП method overloading рж╣рзЯ, ржХрж┐ржирзНрждрзБ JavaScript ржП true overloading ржирж╛ржЗред
        JS-ржП ржХрзЗржмрж▓ default / optional parameter ржжрж┐рзЯрзЗ simulate ржХрж░рж╛ ржпрж╛рзЯред

     // Java Example (true overloading possible)
             class MathOp {
                  int add(int a, int b) {
                   return a + b;
                    }

                  double add(double a, double b) {
                   return a + b;
                    }
                }

 * 

   
2я╕ПтГг Run-time Polymorphism (Method Overriding)

   ЁЯСЙ ржПржЦрж╛ржирзЗ Parent class ржПрж░ method ржХрзЗ Child class ржирж┐ржЬрзЗрж░ ржорждрзЛ ржХрж░рзЗ implement ржХрж░рзЗред
   ЁЯСЙ ржХрзЛржиржЯрж╛ ржХрж▓ рж╣ржмрзЗ рж╕рзЗржЯрж╛ runtime ржП ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯред

   ЁЯУМ JavaScript ржП overriding ржкрзБрж░рзЛржкрзБрж░рж┐ ржХрж╛ржЬ ржХрж░рзЗред

// 2. Run-time Polymorphism (Method Overriding)
//Example: upore ace





#### Why is Polymorphism useful?

1.Code reusability: ЁЯСЙ ржПржХржЗ ржирж╛ржорзЗрж░ method ржмрж╛ function ржмрж┐ржнрж┐ржирзНржи ржЬрж╛рзЯржЧрж╛рзЯ ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗред
рждрж╛рждрзЗ ржирждрзБржи method ржмрж╛рж░ржмрж╛рж░ рж▓рж┐ржЦрждрзЗ рж╣рзЯ ржирж╛ тЖТ ржХрзЛржб ржЫрзЛржЯ рж╣рзЯ, maintain ржХрж░рж╛ рж╕рж╣ржЬ рж╣рзЯред

2.Flexibility:
  ЁЯСЙ Polymorphism ржПрж░ ржХрж╛рж░ржгрзЗ ржПржХржЗ method ржмрж┐ржнрж┐ржирзНржиржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗред
   ржлрж▓рзЗ developer рж╕рж╣ржЬрзЗ ржХрзЛржб extend ржХрж░рждрзЗ ржкрж╛рж░рзЗред

3.Makes OOP powerful: 
   Polymorphism ржерж╛ржХрж╛рзЯ object-ржПрж░ ржЖржЪрж░ржг runtime ржП ржмржжрж▓рж╛ржирзЛ ржпрж╛рзЯред
   ржПрж░ ржлрж▓рзЗ system ржЖрж░ржУ dynamic ржПржмржВ scalable рж╣рзЯред 

4.Same function name can be used for different purposes: 
 ЁЯСЙ ржПржХржЯрж┐ ржирж╛ржо ржоржирзЗ рж░рж╛ржЦрж▓рзЗржЗ рж╣ржмрзЗ, ржЖрж▓рж╛ржжрж╛ ржЖрж▓рж╛ржжрж╛ ржХрж╛ржЬ object ржЕржирзБрж╕рж╛рж░рзЗ рж╣рзЯрзЗ ржпрж╛ржмрзЗред

vvvv
5.тАЬWhy is polymorphism called the backbone of OOP?тАЭ
ЁЯСЙ ржХрж╛рж░ржг ржПржЯрж┐ ржПржХ ржирж╛ржоржХрзЗ ржЕржирзЗржХржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ рж╕рзБржпрзЛржЧ ржжрзЗрзЯ, ржлрж▓рзЗ ржХрзЛржб flexible ржПржмржВ reusable рж╣рзЯред
 */











