/**
 * üîπ Encapsulation ‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßÄ?
     1.‡¶°‡¶æ‡¶ü‡¶æ hide ‡¶ï‡¶∞‡¶æ (protect ‡¶ï‡¶∞‡¶æ) ‡¶Ø‡¶æ‡¶§‡ßá ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá direct access ‡¶ï‡¶∞‡¶æ ‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
     2.‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá access ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶≤‡ßá ‚Üí getter / setter ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü‡•§
         getter = read data and setter = update data 

     3.Public property = ‡¶∏‡¶¨‡¶æ‡¶á ‡¶¶‡ßá‡¶ñ‡¶§‡ßá/‡¶ö‡¶æ‡¶≤‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§
     4.Private property = direct ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá access ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§
 */

   //  1Ô∏è‚É£ Public Properties (normal)

   class JoyPublic{
    constructor(name,age){
       this.name=name; // public
       this.age=age;  // public
    }

   }

   const Pulic1 = new JoyPublic("joy",18);
   console.log(Pulic1.name+"and"+Pulic1.age) // Joy,22 ‚úÖ public ‡¶§‡¶æ‡¶á ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá



   //2Ô∏è‚É£ Private Properties (using #)

   class BankAccount{
    #balance;// private property

    constructor(owner,balance){
        this.owner=owner; //public
        this.#balance =balance; //private
    }
    // Getter ‚Üí ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶™‡ßú‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá
    get balance(){
        return this.#balance;
    }

    // Setter ‚Üí update ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá
    set balance(amount){
        if(amount<0){
            console.log("Invalid balance!");
        }else{
            this.#balance=amount;
        }
    }
   }

  const acc = new BankAccount("joy",50000);
  console.log(acc.owner);  // Joy ‚úÖ public
  console.log(acc.balance); // 5000 ‚úÖ getter

  acc.balance=8000; // ‚úÖ setter ‡¶¶‡¶ø‡ßü‡ßá update
  console.log(acc.balance)  // 8000
  acc.balance = -1000;   // ‚ùå Invalid balance!
  acc.balance = -2000;   // ‚ùå Invalid balance!
  

/**
 * üîπ Why Encapsulation?
      1.Sensitive data protect ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
        ‚Üí ‡¶Ø‡ßá‡¶Æ‡¶® Bank account balance, password, ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø‡•§
      2.Access control ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü (getter ‡¶¶‡¶ø‡ßü‡ßá read-only, setter ‡¶¶‡¶ø‡ßü‡ßá limited write)‡•§
      3.Code clean, secure, ‡¶è‡¶¨‡¶Ç maintainable ‡¶π‡ßü‡•§

üîπ Quick viva style questions
   1.Encapsulation ‡¶ï‡ßÄ?
    ‚Üí Data hide ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡•§
   2.JavaScript ‡¶è private property declare ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü?
    ‚Üí # (hash symbol)‡•§

   3.Getter & Setter ‡¶ï‡ßá‡¶® ‡¶≤‡¶æ‡¶ó‡ßá?
     ‚Üí Private data ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá access ‡¶ì update ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
 */





//üîπ Advanced Encapsulation in JavaScript

console.log("..............................Advanced Encapsulation in JavaScript.................")


//1Ô∏è‚É£ BankAccount Example (Sensitive Data Protect)

   
class BrakBank{
 #balance; //private
 #pin // private 

 constructor(owner,balance,pin){
    this.owner=owner; // public
    this.#balance=balance; // private 
    this.#pin=pin;   // private 
 }


 // Getter (readonly,pin check )
 getBalance(pin){
    if(pin===this.#pin){
        return `Balance:${this.#balance} BDT`;
    }else{

        return "Wrong PIN!"
    }

 }

 deposit(amount){
    if(amount>0){
      //  this.amount=amount;
       // this.#balance+=this.amount; or
    
         this.#balance+=amount;
        return `Deposited ${amount}.New balance:${this.#balance}`
        }else{
              return "Deposoted failed!"
            }
      }



      withdrow(amount,pin){
        if(pin!==this.#pin){
            return "wrong PIN"
        }
        else if(amount>this.#balance){
            return "Insufficient balance!"
        }else{
        this.#balance=this.#balance-amount;
        return`Withdrow ${amount}. Now Main balance is: ${this.#balance}`
        }
      }


}
const BrakBankObj1 =new BrakBank("JOY BAIDYA",75000,12345);
console.log(BrakBankObj1.getBalance(12345));

console.log(BrakBankObj1.deposit(5000));

console.log(BrakBankObj1.withdrow(5000,12345));

console.log(BrakBankObj1.balance);




//..................................................................More complex Example:.......................................................................


console.log("..............................Complex Example: E-Commerce Cart System.................")

class ShoppingCart {
  #items = []; // private array

  addItem(product, price, qty = 1) {
    this.#items.push({ product, price, qty });
  }

  removeItem(product) {
    this.#items = this.#items.filter(item => item.product !== product);
  }

  get totalAmount() {
    return this.#items.reduce((sum, item) => sum + (item.price * item.qty), 0);
  }

  getCartDetails() {
    return this.#items.map(item => `${item.product} x${item.qty} = ${item.price * item.qty}`).join("\n");
  }
}

// Usage
const cart = new ShoppingCart();
cart.addItem("Laptop", 60000, 1);
cart.addItem("Mouse", 1000, 2);
cart.addItem("Keyboard", 3000, 1);

console.log(cart.getCartDetails());
/*
Laptop x1 = 60000
Mouse x2 = 2000
Keyboard x1 = 3000
*/

console.log("Total:", cart.totalAmount); // 65000
cart.removeItem("Mouse");
console.log("After Removing Mouse:", cart.totalAmount); // 63000
