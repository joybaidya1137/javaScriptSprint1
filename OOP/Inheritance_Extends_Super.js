/**
 
 * üî• Inheritance ‡¶ï‡ßÄ?
üëâ ‡¶Ø‡¶ñ‡¶® ‡¶è‡¶ï‡¶ü‡¶æ child class ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶æ parent class ‡¶•‡ßá‡¶ï‡ßá property ‡¶Ü‡¶∞ method ‡¶®‡¶ø‡ßü‡ßá ‡¶®‡ßá‡ßü, ‡¶∏‡ßá‡¶ü‡¶æ‡¶á Inheritance‡•§
üëâ JavaScript-‡¶è extends ‡¶¶‡¶ø‡ßü‡ßá inheritance ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§


 */


//üü¢ Step 1: Parent Class ‡¶¨‡¶æ‡¶®‡¶æ‡¶á
class Parent{
    constructor(type,seat,speed){
        this.type=type;
        this.speed=speed;
        this.seat=seat;
    }
    showType(){
        return `${this.type} is starting and seat is:  ${this.seat} and speed: ${this.speed}`;
    }
}

//üü° Step 2: Child Class ‡¶¨‡¶æ‡¶®‡¶æ‡¶á (extends)

class Child  extends Parent{
     constructor(brand,model){
        super("Car",5,"1500cc"); // super ‡¶¶‡¶ø‡ßü‡ßá parent ‡¶è‡¶∞ constructor call ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
        this.brand=brand;
        this.model=model;
     }
     info(){
        return `${this.brand} ${this.model}`;
     }
}


const obj1 = new Child ("BMW","Colora");
console.log(obj1.showType()); // Car is starting... (parent class ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡ßá)
console.log(obj1.info());  // Toyota Corolla (child class ‡¶è‡¶∞ method)
 
