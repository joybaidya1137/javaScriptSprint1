/**
 
 * üî• Inheritance ‡¶ï‡ßÄ?
üëâ ‡¶Ø‡¶ñ‡¶® ‡¶è‡¶ï‡¶ü‡¶æ child class ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶æ parent class ‡¶•‡ßá‡¶ï‡ßá property ‡¶Ü‡¶∞ method ‡¶®‡¶ø‡ßü‡ßá ‡¶®‡ßá‡ßü, ‡¶∏‡ßá‡¶ü‡¶æ‡¶á Inheritance‡•§
üëâ JavaScript-‡¶è extends ‡¶¶‡¶ø‡ßü‡ßá inheritance ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§


 */


//üü¢ Step 1: Parent Class ‡¶¨‡¶æ‡¶®‡¶æ‡¶á
class Parent{
    constructor(type,seat,speed){
        this.type=type;
        this.speed=speed;
        this.seat=seat;
    }
    showType(){
        return `${this.type} is starting and seat is:  ${this.seat} and speed: ${this.speed}`;
    }
}

//üü° Step 2: Child Class ‡¶¨‡¶æ‡¶®‡¶æ‡¶á (extends)

class Child  extends Parent{
     constructor(brand,model){
        super("Car",5,"1500cc"); // super ‡¶¶‡¶ø‡ßü‡ßá parent ‡¶è‡¶∞ constructor call ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
        this.brand=brand;
        this.model=model;
     }
     info(){
        return `${this.brand} ${this.model}`;
     }
}


const obj1 = new Child ("BMW","Colora");
console.log(obj1.showType()); // Car is starting... (parent class ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡ßá)
console.log(obj1.info());  // Toyota Corolla (child class ‡¶è‡¶∞ method)
 

console.log("\n","....................Override methode Understanding:.........................................")
/**
 * üîπ Method Override ‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßÄ?
            1.Override ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã child class ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ version ‡¶≤‡¶ø‡¶ñ‡ßá parent class method replace ‡¶ï‡¶∞‡¶õ‡ßá‡•§
            2.Parent class method ‡¶è‡¶ñ‡¶® child object ‡¶¶‡¶ø‡ßü‡ßá call ‡¶ï‡¶∞‡¶≤‡ßá child version run ‡¶π‡¶¨‡ßá‡•§
            3.‡¶ö‡¶æ‡¶á‡¶≤‡ßá child class ‡¶•‡ßá‡¶ï‡ßá super.method() ‡¶¶‡¶ø‡ßü‡ßá parent version call ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
 */


//1.‡¶ö‡¶≤‡ßã step by step ‡¶¶‡ßá‡¶ñ‡¶æ‡¶á ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá parent class ‡¶¨‡¶æ‡¶®‡¶æ‡¶á, child class extend ‡¶ï‡¶∞‡¶ø, ‡¶è‡¶¨‡¶Ç method override ‡¶ï‡¶∞‡¶ø‡•§
class P1{
    constructor(type, engine){
        this.type=type;
        this.engine = engine;

    }
   joy(){
     return `${this.type} with ${this.engine} engine is starting...`;
   }

   joybaidya() {
    return `Type: ${this.type}, Engine: ${this.engine}`;
  }
}

//2Ô∏è‚É£ Child Class ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã (extends)

class C1 extends P1{
    constructor(brand,model,engine){
        super("Car",engine); // parent constructor call
        this.brand=brand;
        this.model=model;
        this.engine=engine;
    }

    joy(){
        return  `${this.brand} ${this.model} is starting `; 
    }

    Carinfo(){
       return `${this.brand} ${this.model} ‚Üí ${super.joybaidya()}`;
    }

}

const child1 = new C1("Toyota", "Corolla", "1500cc");

console.log(child1.joy()); 
console.log(child1.Carinfo());





console.log("\n","..........................Complex Inheritance Example:...................................");
console.log("\n","1Ô∏è‚É£ Parent Class (Vehicle):");

 class Vehicle {
    constructor(type, engine, tires) {
        this.type = type;
        this.engine = engine;
        this.tires = tires;
    }

    start() {
        return `${this.type} with ${this.engine} engine is starting...`;
    }

    info() {
        return `Type: ${this.type}, Engine: ${this.engine}, Tires: ${this.tires}`;
    }
}


console.log("\n","First Child Class (Car):");

class Car extends Vehicle {
    constructor(brand, model, engine, tires, seats) {
        super("Car", engine, tires); // parent constructor
        this.brand = brand;
        this.model = model;
        this.seats = seats;
    }

    // override start
    start() {
        return `${this.brand} ${this.model} with ${this.engine} engine is starting in style!`;
    }

    carInfo() {
        return `${this.brand} ${this.model} ‚Üí ${super.info()}, Seats: ${this.seats}`;
    }
}


console.log("\n","Second Child Class (ElectricCar, inherits Car):");


class ElectricCar extends Car {
    constructor(brand, model, batteryCapacity, tires, seats) {
        super(brand, model, "Electric", tires, seats); // engine="Electric"
        this.batteryCapacity = batteryCapacity;
    }

    // override start
    start() {
        return `${this.brand} ${this.model} is starting silently with battery ${this.batteryCapacity} kWh!`;
    }

    fullInfo() {
        return `${this.carInfo()} ‚Üí Battery: ${this.batteryCapacity} kWh`;
    }
}


const tesla = new ElectricCar("Tesla", "Model S", 100, 4, 5);

console.log(tesla.start());    
// Tesla Model S is starting silently with battery 100 kWh!

console.log(tesla.fullInfo()); 
// Tesla Model S ‚Üí Type: Car, Engine: Electric, Tires: 4, Seats: 5 ‚Üí Battery: 100 kWh
